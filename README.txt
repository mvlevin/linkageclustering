Библиотека для подсчета последовательности значений linkage функции
на множестве с заданной матрицей dissimilarities.

Реализация основана на алгоритме из диссертации Акшая Вашишта.
Текст диссертации прилагается к проекту.

На вход алгоритму подается квадратная матрица dissimilarities в том или ином виде.
Все dissimilarities обязаны быть неотрицательными, это требование к
linkage функции из диссертации.

Матрица может представляться различными способами, два из которых
реализованы для примера. Вообще говоря, предполагается, что для больших
размеров матрицы она очень разрежена. Сложность всего алгоритма
составляет O(E + V log V), где E - количество ненулевых элементов
матрицы, V - размер (количество строк) матрицы. Количество затрачиваемой
памяти зависит от реализации класса матрицы, см. ниже.

У матрицы задаются типы для индексов элементов
(например int32 или int64) и тип элементов матрицы (например int32, int64, double).
Матрица должна предоставлять эти типы в виде внутренних typedef'ов
IndexType и DissimilarityValueType. 

Также она должна предоставлять тип RowIterator -
ForwardIterator по одной строке матрицы. Перечисляет в произвольном порядке все
ненулевые элементы столбца. Может двигаться только вперед на один.

Матрица умеет возвращать количество своих строк и итератор по каждой строке.

Реализованы два класса таких матриц: MemoryBasedDissimilarityMatrix и
FileSetDissimilarityMatrix.

MemoryBasedDissimilarityMatrix - хранится
в памяти, хранит вектор строк, каждая строка - вектор пар (index, dissimilarity)
для всех столбцов, в которых стоит ненулевое значение dissimilarity. Памяти
используется O(E), где E - количество ненулевых элементов матрицы, причем
каждое ребро в случае симметричной матрицы хранится два раза, 
в начальной и конечной вершине матрицы. 

FileSetDissimilarityMatrix - хранится в файлах на диске. Т.е. i-я строка матрицы
лежит в файле с названием <basename>-i.txt, т.е. input-0.txt, input-1.txt, ...,
input-33.txt, ..., input-323.txt, ...
При этом памяти требуется лишь O(V), где V - количество строк матрицы. В ходе
выполнения алгоритма каждый из этих файлов будет прочитан ровно два раза, один
раз при заполнении изначальных значений linkage функции и один раз при постепенном
извлечении элементов из текущего множества. Такой тип матрицы необходимо использовать,
если O(E) данных в память одного компьютера не влезает. O(V) памяти алгоритму
нужно будет использовать в любом случае, т.к. нужно хранить все значения linkage функции.
Соответственно, если хочется, чтобы алгоритм работал при V > 2^32 - 2, нужно использовать
64-битную машину.

Основной класс - LinkageSequenceComputer. Параметризуется типом матрицы (что включает
в себя типы IndexType и DissimilarityValueType) и типом LinkageValueType, необходимым
для представления значений linkage функции. Эти значения могут быть в V раз больше, чем
значения отдельных dissimilarities, поэтому чаще всего придется хранить в разных
типах элементы матрицы и значения linkage функции. Например, DissimilarityValueType=int32,
LinkageValueType=int64. У LinkageSequenceComputer'а одна публичная 
функция, которая принимает на вход матрицу и выдает искомую последовательность в форме

(i_1, F_{i_1}), (i_2, F_{i_2}), \dots, (i_n, F_{i_n}),

где i_1, i_2, \dots, i_n - последовательность удаляемых элементов, F_{i_1} - значения
linkage функции до удаления соответствующего элемента.

Вспомогательные классы:

TextFileReader - реализация интерфейса FileReader для FileSetDissimilarityMatrix
в предположении, что файлы текстовые. Также можно использовать файлы в бинарном формате
или другом, но предполагается, что формат входных файлов в этом случае следующий:
Сначала идет количество ненулевых столбцов в строке. Затем пары (индекс dissimilarity),
(индекс dissimilarity). Пары в произвольном порядке, но сначала всегда записывается
индекс, потом соответствующая dissimilarity.

На данный момент, если какая-то функция чтения не срабатывает или происходит еще что-нибудь
"плохое", программа сообщает нечто об этой ошибке в cerr и аварийно завершается (abort).
Возможно заменить
эти вещи на exception'ы при необходимости, если обработку ошибок планируется делать по-другому.

Примеры использования библиотеки:

calculate_in_memory - считывает пример из input.txt, выводит в output.txt, использует
MemoryBasedDissimilarityMatrix.

calculate_in_files - считывает пример из basename[0-n].txt, выводит в output.txt,
использует FileSetDissimilarityMatrix. Принимает аргументы командной строки:
basename - базовое имя для файлов и rowcount - количество строк в матрице, т.е.
файлы нумеруются от 0 до rowcount-1.
